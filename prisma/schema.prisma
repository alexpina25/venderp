generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── 1. AUTH / ORGANIZATION ─────────────────────────────────────────────
//

model User {
  id        String   @id @default(cuid())
  customId  Int?
  email     String   @unique
  name      String
  password  String
  role      Role
  tenantId  String?
  tenant    Tenant?  @relation(fields: [tenantId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  routes       Route[]
  maintenance  MaintenanceLog[]
  activityLogs ActivityLog[]
  centers      CenterUser[]
  pos          POSUser[]
}

model Tenant {
  id      String    @id @default(uuid())
  customId Int?
  name    String
  users   User[]
  centers Center[]
  masters Master[]
  Product Product[]
}

model CenterUser {
  id       String @id @default(uuid())
  customId Int?
  userId   String
  centerId String
  user     User   @relation(fields: [userId], references: [id])
  center   Center @relation(fields: [centerId], references: [id])
}

model POSUser {
  id     String @id @default(uuid())
  customId Int?
  userId String
  posId  String
  user   User   @relation(fields: [userId], references: [id])
  pos    POS    @relation(fields: [posId], references: [id])
}

enum Role {
  SUPERADMIN
  TENANT_ADMIN
  TENANT_USER
  CENTER_MANAGER
  CENTER_USER
  POS_USER
}

//
// ─── 2. CENTERS AND POINTS OF SALE ──────────────────────────────────────
//

model Center {
  id             String       @id @default(uuid())
  customId       Int?
  name           String
  address        String
  city           String
  postalCode     String?
  province       String?
  country        String?
  contactName    String?
  contactPhone   String?
  contactEmail   String?
  notes          String?
  isParent       Boolean      @default(false)
  active         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  tenantId       String
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
  pos            POS[]
  invoices       Invoice[]
  users          CenterUser[]
  parentCenterId String?
  parentCenter   Center?      @relation("CenterHierarchy", fields: [parentCenterId], references: [id])
  subCenters     Center[]     @relation("CenterHierarchy")
  Machine        Machine[]
}

model POS {
  id           String      @id @default(uuid())
  customId     Int?
  code         String      @unique
  name         String
  address      String
  city         String
  postalCode   String?
  province     String?
  country      String?
  contactName  String?
  contactPhone String?
  contactEmail String?
  notes        String?
  centerId     String
  center       Center      @relation(fields: [centerId], references: [id])
  machine      Machine?
  users        POSUser[]
  master       Master?
  coverage     Int         @default(0)
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Sale         Sale[]
  RouteStop    RouteStop[]
}

model Master {
  id           String   @id @default(uuid())
  customId     Int?
  serialNumber String   @unique
  tenantId     String
  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  posId        String?  @unique
  pos          POS?     @relation(fields: [posId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//
// ─── 3. MACHINES AND PRODUCTS ───────────────────────────────────────────
//

model Machine {
  id           String        @id @default(uuid())
  customId     Int?          @unique
  code         String        @unique
  model        String?
  serialNumber String?       @unique
  type         MachineType
  status       MachineStatus @default(ACTIVE)
  lastCheck    DateTime?
  installedAt  DateTime?
  centerId     String
  center       Center        @relation(fields: [centerId], references: [id])

  posId String? @unique
  pos   POS?    @relation(fields: [posId], references: [id])

  products       MachineProduct[]
  maintenanceLog MaintenanceLog[]
  replenishments Replenishment[]
  sales          Sale[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MachineType {
  SNACK
  DRINK
  COMBO
  CAFE
  OTHER
}

enum MachineStatus {
  ACTIVE
  OUT_OF_SERVICE
  RETIRED
}

model Product {
  id        String          @id @default(uuid())
  customId  Int?            @unique
  name      String
  tenantId  String
  tenant    Tenant          @relation(fields: [tenantId], references: [id])
  category  ProductCategory
  price     Float
  cost      Float?
  unit      String
  imageUrl  String?
  stockMin  Int?
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  machineStocks      MachineProduct[]
  replenishmentItems ReplenishmentItem[]
  sales              Sale[]
}

enum ProductCategory {
  SNACK
  DRINK
  COMBO
  OTHER
}

model MachineProduct {
  id           String @id @default(uuid())
  customId     Int?
  machineId    String
  productId    String
  currentStock Int
  maxCapacity  Int
  minThreshold Int
  price        Float
  line         String
  selection    String

  machine Machine @relation(fields: [machineId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//
// ─── 4. REPLENISHMENT AND MAINTENANCE ───────────────────────────────────
//

model Replenishment {
  id        String   @id @default(uuid())
  customId  Int?
  machineId String
  routeId   String
  date      DateTime @default(now())
  notes     String?

  machine Machine             @relation(fields: [machineId], references: [id])
  route   Route               @relation(fields: [routeId], references: [id])
  items   ReplenishmentItem[]
}

model ReplenishmentItem {
  id              String @id @default(uuid())
  customId        Int?
  replenishmentId String
  productId       String
  quantityAdded   Int
  quantityExpired Int?
  stockBefore     Int
  stockAfter      Int

  replenishment Replenishment @relation(fields: [replenishmentId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}

model MaintenanceLog {
  id          String          @id @default(uuid())
  customId    Int?
  machineId   String
  operatorId  String
  date        DateTime        @default(now())
  type        MaintenanceType
  description String
  cost        Float?
  durationMin Int?
  resolved    Boolean         @default(false)

  machine  Machine @relation(fields: [machineId], references: [id])
  operator User    @relation(fields: [operatorId], references: [id])
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
}

//
// ─── 5. ROUTES AND INVOICES ─────────────────────────────────────────────
//

model Route {
  id         String   @id @default(uuid())
  customId   Int?
  date       DateTime
  operatorId String
  notes      String?

  operator       User            @relation(fields: [operatorId], references: [id])
  replenishments Replenishment[]
  stops          RouteStop[]
}

model RouteStop {
  id               String  @id @default(uuid())
  customId         Int?
  routeId          String
  posId            String
  cashCollected    Float?
  walletReload     Float?
  maintenanceNotes String?
  priceChangeNotes String?
  notes            String?

  route Route @relation(fields: [routeId], references: [id])
  pos   POS   @relation(fields: [posId], references: [id])
}

model Invoice {
  id        String        @id @default(uuid())
  customId  Int?
  centerId  String
  issuedAt  DateTime      @default(now())
  dueDate   DateTime?
  amount    Float
  currency  String        @default("EUR")
  status    InvoiceStatus @default(PENDING)
  concept   String?
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  center Center @relation(fields: [centerId], references: [id])
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

//
// ─── 6. AUDIT LOGS ──────────────────────────────────────────────────────
//

model ActivityLog {
  id        String   @id @default(uuid())
  customId  Int?
  userId    String
  action    String
  entity    String
  entityId  String
  changes   Json?
  context   String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

//
// ─── 7. SALES ──────────────────────────────────────────────────────────────
//

enum SaleMethod {
  COIN
  BILL
  CARD
}

model Sale {
  id        String     @id @default(uuid())
  customId  Int?
  posId     String
  productId String
  method    SaleMethod
  price     Float
  inserted  Float
  change    Float
  timestamp DateTime   @default(now())

  pos       POS      @relation(fields: [posId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  Machine   Machine? @relation(fields: [machineId], references: [id])
  machineId String?
}

model Counter {
  id        String  @id @default(uuid())
  tenantId  String
  model     String
  lastValue Int     @default(0)

  tenant Tenant @relation(fields: [tenantId], references: [id])

  @@unique([tenantId, model])
}
