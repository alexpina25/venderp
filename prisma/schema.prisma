generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── 1. AUTH / ORGANIZATION ─────────────────────────────────────────────
//

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  name             String
  password         String
  role             Role
  avatarUrl        String?
  tenantId         String?
  tenant           Tenant? @relation(fields: [tenantId], references: [id])
  dashboardWidgets String[] @default([])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  routes         Route[]
  maintenance    MaintenanceLog[]
  activityLogs   ActivityLog[]
  centers        CenterUser[]
  pofs           POFUser[]
}

model Tenant {
  id      String @id @default(uuid())
  name    String
  users   User[]
  centers Center[]
}

model CenterUser {
  id        String @id @default(uuid())
  userId    String
  centerId  String
  user      User   @relation(fields: [userId], references: [id])
  center    Center @relation(fields: [centerId], references: [id])
}

model POFUser {
  id      String @id @default(uuid())
  userId  String
  pofId   String
  user    User @relation(fields: [userId], references: [id])
  pof     POF  @relation(fields: [pofId], references: [id])
}

enum Role {
  SUPERADMIN
  TENANT_ADMIN
  TENANT_USER
  CENTER_MANAGER
  CENTER_USER
  POF_USER
}

//
// ─── 2. CENTERS AND POINTS OF SALE ──────────────────────────────────────
//

model Center {
  id         String       @id @default(uuid())
  name       String
  tenantId   String
  tenant     Tenant       @relation(fields: [tenantId], references: [id])
  pofs       POF[]
  invoices   Invoice[]
  users      CenterUser[]
}

model POF {
  id        String     @id @default(uuid())
  name      String
  address   String
  centerId  String
  center    Center     @relation(fields: [centerId], references: [id])
  machine   Machine?
  users     POFUser[]
}

//
// ─── 3. MACHINES AND PRODUCTS ───────────────────────────────────────────
//

model Machine {
  id           String        @id @default(uuid())
  customId     Int?          @unique
  code         String        @unique
  model        String?
  serialNumber String?       @unique
  type         MachineType
  status       MachineStatus @default(ACTIVE)
  lastCheck    DateTime?
  installedAt  DateTime?

  pofId        String? @unique
  pof          POF?    @relation(fields: [pofId], references: [id])

  products       MachineProduct[]
  maintenanceLog MaintenanceLog[]
  replenishments Replenishment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MachineType {
  SNACK
  DRINK
  COMBO
  CAFE
  OTHER
}

enum MachineStatus {
  ACTIVE
  OUT_OF_SERVICE
  RETIRED
}

model Product {
  id        String          @id @default(uuid())
  customId  Int?            @unique
  name      String
  category  ProductCategory
  price     Float
  cost      Float?
  unit      String
  imageUrl  String?
  stockMin  Int?
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  machineStocks      MachineProduct[]
  replenishmentItems ReplenishmentItem[]
}

enum ProductCategory {
  SNACK
  DRINK
  COMBO
  OTHER
}

model MachineProduct {
  id           String @id @default(uuid())
  machineId    String
  productId    String
  currentStock Int
  maxCapacity  Int
  minThreshold Int
  price        Float
  line         String
  selection    String

  machine Machine @relation(fields: [machineId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//
// ─── 4. REPLENISHMENT AND MAINTENANCE ───────────────────────────────────
//

model Replenishment {
  id        String   @id @default(uuid())
  machineId String
  routeId   String
  date      DateTime @default(now())
  notes     String?

  machine Machine            @relation(fields: [machineId], references: [id])
  route   Route              @relation(fields: [routeId], references: [id])
  items   ReplenishmentItem[]
}

model ReplenishmentItem {
  id              String @id @default(uuid())
  replenishmentId String
  productId       String
  quantityAdded   Int
  stockBefore     Int
  stockAfter      Int

  replenishment Replenishment @relation(fields: [replenishmentId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}

model MaintenanceLog {
  id          String          @id @default(uuid())
  machineId   String
  operatorId  String
  date        DateTime        @default(now())
  type        MaintenanceType
  description String
  cost        Float?
  durationMin Int?
  resolved    Boolean         @default(false)

  machine  Machine @relation(fields: [machineId], references: [id])
  operator User    @relation(fields: [operatorId], references: [id])
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
}

//
// ─── 5. ROUTES AND INVOICES ─────────────────────────────────────────────
//

model Route {
  id         String   @id @default(uuid())
  date       DateTime
  operatorId String
  notes      String?

  operator       User           @relation(fields: [operatorId], references: [id])
  replenishments Replenishment[]
}

model Invoice {
  id        String        @id @default(uuid())
  centerId  String
  issuedAt  DateTime      @default(now())
  dueDate   DateTime?
  amount    Float
  currency  String        @default("EUR")
  status    InvoiceStatus @default(PENDING)
  concept   String?
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  center Center @relation(fields: [centerId], references: [id])
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

//
// ─── 6. AUDIT LOGS ──────────────────────────────────────────────────────
//

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  entity    String
  entityId  String
  changes   Json?
  context   String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
