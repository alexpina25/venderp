generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ─── 1. AUTH / ORGANIZACIÓN ──────────────────────────────────────────────
//

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(OPERATOR)
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 🔐 Relación con organización
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])

  // 📦 Relaciones
  routes       Route[]
  maintenance  MaintenanceLog[]
  activityLogs ActivityLog[]
}

model Organization {
  id    String @id @default(uuid())
  name  String
  users User[]
}

enum Role {
  ADMIN
  OPERATOR
}

//
// ─── 2. CLIENTES Y UBICACIONES ───────────────────────────────────────────
//

model Client {
  id           String   @id @default(uuid())
  customId     Int?     @unique // 🆔 Código visual para el cliente
  name         String
  address      String
  city         String
  postalCode   String?
  province     String?
  country      String?  @default("España")
  contactName  String
  contactPhone String
  contactEmail String?
  notes        String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 🔗 Ubicaciones asociadas
  locations Location[]

  // 💸 Facturación
  invoices Invoice[]
  Machine  Machine[]
}

model Location {
  id           String   @id @default(uuid())
  customId     Int?     @unique // 🆔 Código visual de la ubicación
  clientId     String
  name         String
  address      String
  city         String
  postalCode   String?
  province     String?
  country      String?  @default("España")
  contactName  String?
  contactPhone String?
  contactEmail String?
  notes        String?
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  client   Client    @relation(fields: [clientId], references: [id])
  machines Machine[]
}

//
// ─── 3. MAQUINARIA Y PRODUCTOS ──────────────────────────────────────────
//

model Machine {
  id           String        @id @default(uuid())
  customId     Int?          @unique // 🆔 Código visual de la máquina
  code         String        @unique
  model        String?
  serialNumber String?       @unique
  type         MachineType
  status       MachineStatus @default(ACTIVE)
  lastCheck    DateTime?
  installedAt  DateTime?

  // 🧾 Relación directa con cliente
  clientId   String
  client     Client   @relation(fields: [clientId], references: [id])
  // 📍 Relación con ubicación (actualizada)
  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  // 📦 Productos instalados
  products MachineProduct[]

  // 🔧 Mantenimiento
  maintenanceLog MaintenanceLog[]

  // 🚚 Reposiciones
  replenishments Replenishment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MachineType {
  SNACK
  DRINK
  COMBO
  CAFE
  OTHER
}

enum MachineStatus {
  ACTIVE
  OUT_OF_SERVICE
  RETIRED
}

model Product {
  id        String          @id @default(uuid())
  customId  Int?            @unique // 🆔 Código visual del producto
  name      String
  category  ProductCategory
  price     Float
  cost      Float?
  unit      String
  imageUrl  String?
  stockMin  Int?
  active    Boolean         @default(true)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  machineStocks      MachineProduct[]
  replenishmentItems ReplenishmentItem[]
}

enum ProductCategory {
  SNACK
  DRINK
  COMBO
  OTHER
}

model MachineProduct {
  id           String @id @default(uuid())
  machineId    String
  productId    String
  currentStock Int
  maxCapacity  Int
  minThreshold Int
  price        Float
  line         String
  selection    String

  machine Machine @relation(fields: [machineId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

//
// ─── 4. REPOSICIONES Y MANTENIMIENTO ─────────────────────────────────────
//

model Replenishment {
  id        String   @id @default(uuid())
  machineId String
  routeId   String
  date      DateTime @default(now())
  notes     String?

  machine Machine @relation(fields: [machineId], references: [id])
  route   Route   @relation(fields: [routeId], references: [id])

  items ReplenishmentItem[]
}

model ReplenishmentItem {
  id              String @id @default(uuid())
  replenishmentId String
  productId       String
  quantityAdded   Int
  stockBefore     Int
  stockAfter      Int

  replenishment Replenishment @relation(fields: [replenishmentId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}

model MaintenanceLog {
  id          String          @id @default(uuid())
  machineId   String
  operatorId  String
  date        DateTime        @default(now())
  type        MaintenanceType
  description String
  cost        Float?
  durationMin Int?
  resolved    Boolean         @default(false)

  machine  Machine @relation(fields: [machineId], references: [id])
  operator User    @relation(fields: [operatorId], references: [id])
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  INSPECTION
}

//
// ─── 5. RUTAS Y FACTURAS ────────────────────────────────────────────────
//

model Route {
  id         String   @id @default(uuid())
  date       DateTime
  operatorId String
  operator   User     @relation(fields: [operatorId], references: [id])
  notes      String?

  replenishments Replenishment[]
}

model Invoice {
  id       String        @id @default(uuid())
  clientId String
  client   Client        @relation(fields: [clientId], references: [id])
  issuedAt DateTime      @default(now())
  dueDate  DateTime?
  amount   Float
  currency String        @default("EUR")
  status   InvoiceStatus @default(PENDING)
  concept  String?
  notes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELLED
  OVERDUE
}

//
// ─── 6. AUDITORÍA / ACTIVITY LOG ─────────────────────────────────────────
//

model ActivityLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  entity    String
  entityId  String
  changes   Json?
  context   String?
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
