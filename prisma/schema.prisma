generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(OPERATOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  routes      Route[]
  maintenance MaintenanceLog[]
}

enum Role {
  ADMIN
  OPERATOR
}

model CustomerLocation {
  id           String    @id @default(uuid())
  name         String
  address      String
  contactName  String
  contactPhone String
  machines     Machine[]
  createdAt    DateTime  @default(now())
}

model Machine {
  id             String           @id @default(uuid())
  code           String           @unique
  locationId     String
  location       CustomerLocation @relation(fields: [locationId], references: [id])
  type           MachineType
  model          String?
  status         MachineStatus    @default(ACTIVE)
  lastCheck      DateTime?
  products       MachineProduct[]
  maintenanceLog MaintenanceLog[]
  replenishments Replenishment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MachineType {
  SNACK
  DRINK
  COMBO
}

enum MachineStatus {
  ACTIVE
  OUT_OF_SERVICE
  RETIRED
}

model Product {
  id        String   @id @default(uuid())
  name      String
  category  String
  price     Float
  unit      String
  createdAt DateTime @default(now())

  machineStocks      MachineProduct[]
  replenishmentItems ReplenishmentItem[]
}

model MachineProduct {
  id           String @id @default(uuid())
  machineId    String
  productId    String
  currentStock Int
  maxCapacity  Int
  minThreshold Int

  machine Machine @relation(fields: [machineId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Route {
  id         String   @id @default(uuid())
  date       DateTime
  operatorId String
  operator   User     @relation(fields: [operatorId], references: [id])
  notes      String?

  replenishments Replenishment[]
}

model Replenishment {
  id        String   @id @default(uuid())
  machineId String
  routeId   String
  date      DateTime @default(now())
  notes     String?

  machine Machine @relation(fields: [machineId], references: [id])
  route   Route   @relation(fields: [routeId], references: [id])

  items ReplenishmentItem[]
}

model ReplenishmentItem {
  id              String @id @default(uuid())
  replenishmentId String
  productId       String
  quantityAdded   Int
  stockBefore     Int
  stockAfter      Int

  replenishment Replenishment @relation(fields: [replenishmentId], references: [id])
  product       Product       @relation(fields: [productId], references: [id])
}

model MaintenanceLog {
  id          String          @id @default(uuid())
  machineId   String
  operatorId  String
  date        DateTime        @default(now())
  type        MaintenanceType
  description String

  machine  Machine @relation(fields: [machineId], references: [id])
  operator User    @relation(fields: [operatorId], references: [id])
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
}
